{"version":3,"file":"core.js","sources":["~/@ngx-translate/core/core.ts","~/@ngx-translate/core/translate.pipe.ts","~/@ngx-translate/core/translate.service.ts","~/@ngx-translate/core/translate.parser.ts","~/@ngx-translate/core/missing-translation-handler.ts","~/@ngx-translate/core/translate.compiler.ts","~/@ngx-translate/core/translate.loader.ts","~/@ngx-translate/core/util.ts","~/@ngx-translate/core/translate.store.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {TranslateStore,equals,isDefined,TranslateLoader,TranslateFakeLoader,USE_STORE,USE_DEFAULT_LANG,TranslationChangeEvent,LangChangeEvent,DefaultLangChangeEvent,TranslateService,MissingTranslationHandlerParams,MissingTranslationHandler,FakeMissingTranslationHandler,TranslateParser,TranslateDefaultParser,TranslatePipe} from './public_api';\n\nexport {TranslateCompiler as Éµa} from './translate.compiler';","import {PipeTransform, Pipe, Injectable, EventEmitter, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {TranslateService, LangChangeEvent, TranslationChangeEvent, DefaultLangChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n    value: string = '';\n    lastKey: string;\n    lastParams: any[];\n    onTranslationChange: EventEmitter<TranslationChangeEvent>;\n    onLangChange: EventEmitter<LangChangeEvent>;\n    onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n/**\n * @param {?} translate\n * @param {?} _ref\n */\nconstructor(private translate: TranslateService,\nprivate _ref: ChangeDetectorRef) {\n    }\n/**\n * @param {?} key\n * @param {?=} interpolateParams\n * @param {?=} translations\n * @return {?}\n */\nupdateValue(key: string, interpolateParams?: Object, translations?: any): void {\n        let /** @type {?} */ onTranslation = (res: string) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        };\n        if(translations) {\n            let /** @type {?} */ res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if(typeof res.subscribe === 'function') {\n                res.subscribe(onTranslation);\n            } else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n/**\n * @param {?} query\n * @param {...?} args\n * @return {?}\n */\ntransform(query: string, ...args: any[]): any {\n        if(!query || query.length === 0) {\n            return query;\n        }\n\n        // if we ask another time for the same key, return the last value\n        if(equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n\n        let /** @type {?} */ interpolateParams: Object;\n        if(isDefined(args[0]) && args.length) {\n            if(typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                let /** @type {?} */ validArgs: string = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                } catch( /** @type {?} */e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            } else if(typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n\n        // store the query, in case it changes\n        this.lastKey = query;\n\n        // store the params, in case they change\n        this.lastParams = args;\n\n        // set the value\n        this.updateValue(query, interpolateParams);\n\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n\n        // subscribe to onTranslationChange event, in case the translations change\n        if(!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n                if(this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onLangChange event, in case the language changes\n        if(!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if(!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            });\n        }\n\n        return this.value;\n    }\n/**\n * Clean any existing subscription to change events\n * @return {?}\n */\n_dispose(): void {\n        if(typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if(typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if(typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n        this._dispose();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Pipe, args: [{\n    name: 'translate',\n    pure: false // required to update the value when the promise is resolved\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslateService, },\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TranslatePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslatePipe.ctorParameters;\n/** @type {?} */\nTranslatePipe.prototype.value;\n/** @type {?} */\nTranslatePipe.prototype.lastKey;\n/** @type {?} */\nTranslatePipe.prototype.lastParams;\n/** @type {?} */\nTranslatePipe.prototype.onTranslationChange;\n/** @type {?} */\nTranslatePipe.prototype.onLangChange;\n/** @type {?} */\nTranslatePipe.prototype.onDefaultLangChange;\n/** @type {?} */\nTranslatePipe.prototype.translate;\n/** @type {?} */\nTranslatePipe.prototype._ref;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, EventEmitter, Inject, InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/concat';\nimport'rxjs/add/operator/share';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/merge';\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/operator/toArray';\nimport'rxjs/add/operator/take';\n\nimport {TranslateStore} from './translate.store';\nimport {TranslateLoader} from './translate.loader';\nimport {TranslateCompiler} from './translate.compiler';\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from './missing-translation-handler';\nimport {TranslateParser} from './translate.parser';\nimport {mergeDeep, isDefined} from './util';\n\nexport const /** @type {?} */ USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const /** @type {?} */ USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n    translations: any;\n    lang: string;\n}\n\nexport interface LangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\ndeclare interface Window {\n    navigator: any;\n}\ndeclare const window: Window;\nexport class TranslateService {\nprivate loadingTranslations: Observable<any>;\nprivate pending: boolean = false;\nprivate _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\nprivate _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\nprivate _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\nprivate _defaultLang: string;\nprivate _currentLang: string;\nprivate _langs: Array<string> = [];\nprivate _translations: any = {};\nprivate _translationRequests: any  = {};\n/**\n * An EventEmitter to listen to translation change events\n * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n *     // do something\n * });\n * @return {?}\n */\nget onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n/**\n * An EventEmitter to listen to lang change events\n * onLangChange.subscribe((params: LangChangeEvent) => {\n *     // do something\n * });\n * @return {?}\n */\nget onLangChange(): EventEmitter<LangChangeEvent> {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n/**\n * An EventEmitter to listen to default lang change events\n * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n *     // do something\n * });\n * @return {?}\n */\nget onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n/**\n * The default lang to fallback when translations are missing on the current lang\n * @return {?}\n */\nget defaultLang(): string {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n/**\n * @param {?} defaultLang\n * @return {?}\n */\nset defaultLang(defaultLang: string) {\n        if(this.isolate) {\n            this._defaultLang = defaultLang;\n        } else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n/**\n * The lang currently used\n * @return {?}\n */\nget currentLang(): string {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n/**\n * @param {?} currentLang\n * @return {?}\n */\nset currentLang(currentLang: string) {\n        if(this.isolate) {\n            this._currentLang = currentLang;\n        } else {\n            this.store.currentLang = currentLang;\n        }\n    }\n/**\n * an array of langs\n * @return {?}\n */\nget langs(): string[] {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n/**\n * @param {?} langs\n * @return {?}\n */\nset langs(langs: string[]) {\n        if(this.isolate) {\n            this._langs = langs;\n        } else {\n            this.store.langs = langs;\n        }\n    }\n/**\n * a list of translations per lang\n * @return {?}\n */\nget translations(): any {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n/**\n * @param {?} translations\n * @return {?}\n */\nset translations(translations: any) {\n        if(this.isolate) {\n            this._currentLang = translations;\n        } else {\n            this.store.translations = translations;\n        }\n    }\n/**\n *\n * @param {?} store an instance of the store (that is supposed to be unique)\n * @param {?} currentLoader An instance of the loader currently used\n * @param {?} compiler An instance of the compiler currently used\n * @param {?} parser An instance of the parser currently used\n * @param {?} missingTranslationHandler A handler for missing translations.\n * @param {?=} useDefaultLang whether we should use default language translation when current language translation is missing.\n * @param {?=} isolate whether this service should use the store or not\n */\nconstructor(public store: TranslateStore,\npublic currentLoader: TranslateLoader,\npublic compiler: TranslateCompiler,\npublic parser: TranslateParser,\npublic missingTranslationHandler: MissingTranslationHandler,\nprivate useDefaultLang: boolean = true,\nprivate isolate: boolean = false) {\n    }\n/**\n * Sets the default language to use as a fallback\n * @param {?} lang\n * @return {?}\n */\npublic setDefaultLang(lang: string): void {\n        if(lang === this.defaultLang) {\n            return;\n        }\n\n        let /** @type {?} */ pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if(!this.defaultLang) {\n                this.defaultLang = lang;\n            }\n\n            pending.take(1)\n                .subscribe((res: any) => {\n                    this.changeDefaultLang(lang);\n                });\n        } else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n/**\n * Gets the default language used\n * @return {?} string\n */\npublic getDefaultLang(): string {\n        return this.defaultLang;\n    }\n/**\n * Changes the lang currently used\n * @param {?} lang\n * @return {?}\n */\npublic use(lang: string): Observable<any> {\n        // don't change the language if the language given is already selected\n        if(lang === this.currentLang) {\n            return Observable.of(this.translations[lang]);\n        }\n        \n        let /** @type {?} */ pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if(!this.currentLang) {\n                this.currentLang = lang;\n            }\n\n            pending.take(1)\n                .subscribe((res: any) => {\n                    this.changeLang(lang);\n                });\n\n            return pending;\n        } else { // we have this language, return an Observable\n            this.changeLang(lang);\n\n            return Observable.of(this.translations[lang]);\n        }\n    }\n/**\n * Retrieves the given translations\n * @param {?} lang\n * @return {?}\n */\nprivate retrieveTranslations(lang: string): Observable<any> {\n        let /** @type {?} */ pending: Observable<any>;\n\n        // if this language is unavailable, ask for it\n        if(typeof this.translations[lang] === \"undefined\") {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n\n        return pending;\n    }\n/**\n * Gets an object of translations for a given language with the current loader\n * and passes it through the compiler\n * @param {?} lang\n * @return {?}\n */\npublic getTranslation(lang: string): Observable<any> {\n        this.pending = true;\n        this.loadingTranslations = this.currentLoader.getTranslation(lang).share();\n\n        this.loadingTranslations.take(1)\n            .subscribe((res: Object) => {\n                this.translations[lang] = this.compiler.compileTranslations(res, lang);\n                this.updateLangs();\n                this.pending = false;\n            }, (err: any) => {\n                this.pending = false;\n            });\n\n        return this.loadingTranslations;\n    }\n/**\n * Manually sets an object of translations for a given language\n * after passing it through the compiler\n * @param {?} lang\n * @param {?} translations\n * @param {?=} shouldMerge\n * @return {?}\n */\npublic setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if(shouldMerge && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        } else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n/**\n * Returns an array of currently available langs\n * @return {?}\n */\npublic getLangs(): Array<string> {\n        return this.langs;\n    }\n/**\n * @param {?} langs \n * Add available langs\n * @return {?}\n */\npublic addLangs(langs: Array<string>): void {\n        langs.forEach((lang: string) => {\n            if(this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        });\n    }\n/**\n * Update the list of available langs\n * @return {?}\n */\nprivate updateLangs(): void {\n        this.addLangs(Object.keys(this.translations));\n    }\n/**\n * Returns the parsed result of the translations\n * @param {?} translations\n * @param {?} key\n * @param {?=} interpolateParams\n * @return {?}\n */\npublic getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n        let /** @type {?} */ res: string | Observable<string>;\n\n        if(key instanceof Array) {\n            let /** @type {?} */ result: any = {}, /** @type {?} */\n                observables: boolean = false;\n            for(let /** @type {?} */ k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if(typeof result[k].subscribe === \"function\") {\n                    observables = true;\n                }\n            }\n            if(observables) {\n                let /** @type {?} */ mergedObs: any;\n                for(let /** @type {?} */ k of key) {\n                    let /** @type {?} */ obs = typeof result[k].subscribe === \"function\" ? result[k] : Observable.of(result[k]);\n                    if(typeof mergedObs === \"undefined\") {\n                        mergedObs = obs;\n                    } else {\n                        mergedObs = mergedObs.merge(obs);\n                    }\n                }\n                return mergedObs.toArray().map((arr: Array<string>) => {\n                    let /** @type {?} */ obj: any = {};\n                    arr.forEach((value: string, index: number) => {\n                        obj[key[index]] = value;\n                    });\n                    return obj;\n                });\n            }\n            return result;\n        }\n\n        if(translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\") {\n            let /** @type {?} */ params: MissingTranslationHandlerParams = {key, translateService: this};\n            if(typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n\n        return typeof res !== \"undefined\" ? res : key;\n    }\n/**\n * Gets the translated value of a key (or an array of keys)\n * @param {?} key\n * @param {?=} interpolateParams\n * @return {?}\n */\npublic get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if(this.pending) {\n            return Observable.create((observer: Observer<string>) => {\n                let /** @type {?} */ onComplete = (res: string) => {\n                    observer.next(res);\n                    observer.complete();\n                };\n                let /** @type {?} */ onError = (err: any) => {\n                    observer.error(err);\n                };\n                this.loadingTranslations.subscribe((res: any) => {\n                    res = this.getParsedResult(res, key, interpolateParams);\n                    if(typeof res.subscribe === \"function\") {\n                        res.subscribe(onComplete, onError);\n                    } else {\n                        onComplete(res);\n                    }\n                }, onError);\n            });\n        } else {\n            let /** @type {?} */ res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            if(typeof res.subscribe === \"function\") {\n                return res;\n            } else {\n                return Observable.of(res);\n            }\n        }\n    }\n/**\n * Returns a stream of translated values of a key (or an array of keys) which updates\n * whenever the language changes.\n * @param {?} key\n * @param {?=} interpolateParams\n * @return {?}\n */\npublic stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        return this\n            .get(key, interpolateParams)\n            .concat(this.onLangChange.switchMap((event: LangChangeEvent) => {\n                const /** @type {?} */ res = this.getParsedResult(event.translations, key, interpolateParams);\n                if(typeof res.subscribe === \"function\") {\n                    return res;\n                } else {\n                    return Observable.of(res);\n                }\n            }));\n    }\n/**\n * Returns a translation instantly from the internal state of loaded translation.\n * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n * @param {?} key\n * @param {?=} interpolateParams\n * @return {?}\n */\npublic instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        let /** @type {?} */ res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if(typeof res.subscribe !== \"undefined\") {\n            if(key instanceof Array) {\n                let /** @type {?} */ obj: any = {};\n                key.forEach((value: string, index: number) => {\n                    obj[key[index]] = key[index];\n                });\n                return obj;\n            }\n            return key;\n        } else {\n            return res;\n        }\n    }\n/**\n * Sets the translated value of a key, after compiling it\n * @param {?} key\n * @param {?} value\n * @param {?=} lang\n * @return {?}\n */\npublic set(key: string, value: string, lang: string = this.currentLang): void {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n/**\n * Changes the current lang\n * @param {?} lang\n * @return {?}\n */\nprivate changeLang(lang: string): void {\n        this.currentLang = lang;\n        this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n        // if there is no default lang, use the one that we just set\n        if(!this.defaultLang) {\n            this.changeDefaultLang(lang);\n        }\n    }\n/**\n * Changes the default lang\n * @param {?} lang\n * @return {?}\n */\nprivate changeDefaultLang(lang: string): void {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n/**\n * Allows to reload the lang file from the file\n * @param {?} lang\n * @return {?}\n */\npublic reloadLang(lang: string): Observable<any> {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n/**\n * Deletes inner translation\n * @param {?} lang\n * @return {?}\n */\npublic resetLang(lang: string): void {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n/**\n * Returns the language code name from the browser, e.g. \"de\"\n * \n * @return {?} string\n */\npublic getBrowserLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let /** @type {?} */ browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        if(browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n\n        if(browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n\n        return browserLang;\n    }\n/**\n * Returns the culture language code name from the browser, e.g. \"de-DE\"\n * \n * @return {?} string\n */\npublic getBrowserCultureLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let /** @type {?} */ browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        return browserCultureLang;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslateStore, },\n{type: TranslateLoader, },\n{type: TranslateCompiler, },\n{type: TranslateParser, },\n{type: MissingTranslationHandler, },\n{type: undefined, decorators: [{ type: Inject, args: [USE_DEFAULT_LANG, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [USE_STORE, ] }, ]},\n];\n}\n\nfunction TranslateService_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslateService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslateService.ctorParameters;\n/** @type {?} */\nTranslateService.prototype.loadingTranslations;\n/** @type {?} */\nTranslateService.prototype.pending;\n/** @type {?} */\nTranslateService.prototype._onTranslationChange;\n/** @type {?} */\nTranslateService.prototype._onLangChange;\n/** @type {?} */\nTranslateService.prototype._onDefaultLangChange;\n/** @type {?} */\nTranslateService.prototype._defaultLang;\n/** @type {?} */\nTranslateService.prototype._currentLang;\n/** @type {?} */\nTranslateService.prototype._langs;\n/** @type {?} */\nTranslateService.prototype._translations;\n/** @type {?} */\nTranslateService.prototype._translationRequests;\n/** @type {?} */\nTranslateService.prototype.store;\n/** @type {?} */\nTranslateService.prototype.currentLoader;\n/** @type {?} */\nTranslateService.prototype.compiler;\n/** @type {?} */\nTranslateService.prototype.parser;\n/** @type {?} */\nTranslateService.prototype.missingTranslationHandler;\n/** @type {?} */\nTranslateService.prototype.useDefaultLang;\n/** @type {?} */\nTranslateService.prototype.isolate;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {isDefined} from './util';\n/**\n * @abstract\n */\nexport abstract class TranslateParser {\n/**\n * Interpolates a string to replace parameters\n * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n * @abstract\n * @param {?} expr\n * @param {?=} params\n * @return {?}\n */\ninterpolate(expr: string | Function, params?: any) {}\n/**\n * Gets a value from an object by composed key\n * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n * @abstract\n * @param {?} target\n * @param {?} key\n * @return {?}\n */\ngetValue(target: any, key: string) {}\n}\nexport class TranslateDefaultParser extends TranslateParser {\n    templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n/**\n * @param {?} expr\n * @param {?=} params\n * @return {?}\n */\npublic interpolate(expr: string | Function, params?: any): string {\n        let /** @type {?} */ result: string;\n\n        if(typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        } else if(typeof expr === 'function') {\n            result =  this.interpolateFunction(expr, params);\n        } else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = /** @type {?} */(( expr as string));\n        }\n\n        return result;\n    }\n/**\n * @param {?} target\n * @param {?} key\n * @return {?}\n */\ngetValue(target: any, key: string): any {\n        let /** @type {?} */ keys = key.split('.');\n        key = '';\n        do {\n            key += keys.shift();\n            if(isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            } else if(!keys.length) {\n                target = undefined;\n            } else {\n                key += '.';\n            }\n        } while(keys.length);\n\n        return target;\n    }\n/**\n * @param {?} fn\n * @param {?=} params\n * @return {?}\n */\nprivate interpolateFunction(fn: Function, params?: any) {\n        return fn(params);\n    }\n/**\n * @param {?} expr\n * @param {?=} params\n * @return {?}\n */\nprivate interpolateString(expr: string, params?: any) {\n        if (!params) {\n            return expr;\n        }\n\n        return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n            let /** @type {?} */ r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TranslateDefaultParser_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslateDefaultParser.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslateDefaultParser.ctorParameters;\n/** @type {?} */\nTranslateDefaultParser.prototype.templateMatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {TranslateService} from './translate.service';\nimport {Injectable} from '@angular/core';\n\nexport interface MissingTranslationHandlerParams {\n    /**\n     * the key that's missing in translation files\n     *\n     * @type {string}\n     */\n    key: string;\n\n    /**\n     * an instance of the service that was unable to translate the key.\n     *\n     * @type {TranslateService}\n     */\n    translateService: TranslateService;\n\n    /**\n     * interpolation params that were passed along for translating the given key.\n     *\n     * @type {Object}\n     */\n    interpolateParams?: Object;\n}\n/**\n * @abstract\n */\nexport abstract class MissingTranslationHandler {\n/**\n * A function that handles missing translations.\n * \n * @abstract \n * If it returns a value, then this value is used.\n * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n * If it doesn't return then the key will be used as a value\n * @abstract\n * @param {?} params\n * @return {?}\n */\nhandle(params: MissingTranslationHandlerParams) {}\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n/**\n * @param {?} params\n * @return {?}\n */\nhandle(params: MissingTranslationHandlerParams): string {\n        return params.key;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FakeMissingTranslationHandler_tsickle_Closure_declarations() {\n/** @type {?} */\nFakeMissingTranslationHandler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFakeMissingTranslationHandler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\n/**\n * @abstract\n */\nexport abstract class TranslateCompiler {\n/**\n * @abstract\n * @param {?} value\n * @param {?} lang\n * @return {?}\n */\ncompile(value: string, lang: string) {}\n/**\n * @abstract\n * @param {?} translations\n * @param {?} lang\n * @return {?}\n */\ncompileTranslations(translations: any, lang: string) {}\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nexport class TranslateFakeCompiler extends TranslateCompiler {\n/**\n * @param {?} value\n * @param {?} lang\n * @return {?}\n */\ncompile(value: string, lang: string): string | Function {\n        return value;\n    }\n/**\n * @param {?} translations\n * @param {?} lang\n * @return {?}\n */\ncompileTranslations(translations: any, lang: string): any {\n        return translations;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TranslateFakeCompiler_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslateFakeCompiler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslateFakeCompiler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Observable} from 'rxjs/Observable';\nimport {Injectable} from '@angular/core';\n/**\n * @abstract\n */\nexport abstract class TranslateLoader {\n/**\n * @abstract\n * @param {?} lang\n * @return {?}\n */\ngetTranslation(lang: string) {}\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nexport class TranslateFakeLoader extends TranslateLoader {\n/**\n * @param {?} lang\n * @return {?}\n */\ngetTranslation(lang: string): Observable<any> {\n        return Observable.of({});\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TranslateFakeLoader_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslateFakeLoader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslateFakeLoader.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@name equals\n * \n * \\@description \n * Determines if two objects or two values are equivalent.\n * \n * Two objects or values are considered equivalent if at least one of the following is true:\n * \n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n * \n * @param {?} o1\n * @param {?} o2\n * @return {?}\n */\nexport function equals(o1: any, o2: any): boolean {\n    if (o1 === o2) return true;\n    if (o1 === null || o2 === null) return false;\n    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n    let /** @type {?} */ t1 = typeof o1, /** @type {?} */ t2 = typeof o2, /** @type {?} */ length: number, /** @type {?} */ key: any, /** @type {?} */ keySet: any;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2)) return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key])) return false;\n                }\n                return true;\n            }\n        } else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isDefined(value: any): boolean {\n    return typeof value !== 'undefined' && value !== null;\n}\n/**\n * @param {?} item\n * @return {?}\n */\nexport function isObject(item: any): boolean {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n/**\n * @param {?} target\n * @param {?} source\n * @return {?}\n */\nexport function mergeDeep(target: any, source: any): any {\n    target = JSON.parse(JSON.stringify(target));\n    source = JSON.parse(JSON.stringify(source));\n    let /** @type {?} */ output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((key: any) => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                } else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            } else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n}\n","import {EventEmitter} from '@angular/core';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from './translate.service';\nexport class TranslateStore {\n/**\n * The default lang to fallback when translations are missing on the current lang\n */\npublic defaultLang: string;\n/**\n * The lang currently used\n */\npublic currentLang: string = this.defaultLang;\n/**\n * a list of translations per lang\n */\npublic translations: any = {};\n/**\n * an array of langs\n */\npublic langs: Array<string> = [];\n/**\n * An EventEmitter to listen to translation change events\n * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n *     // do something\n * });\n */\npublic onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n/**\n * An EventEmitter to listen to lang change events\n * onLangChange.subscribe((params: LangChangeEvent) => {\n *     // do something\n * });\n */\npublic onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n/**\n * An EventEmitter to listen to default lang change events\n * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n *     // do something\n * });\n */\npublic onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n\nfunction TranslateStore_tsickle_Closure_declarations() {\n/**\n * The default lang to fallback when translations are missing on the current lang\n * @type {?}\n */\nTranslateStore.prototype.defaultLang;\n/**\n * The lang currently used\n * @type {?}\n */\nTranslateStore.prototype.currentLang;\n/**\n * a list of translations per lang\n * @type {?}\n */\nTranslateStore.prototype.translations;\n/**\n * an array of langs\n * @type {?}\n */\nTranslateStore.prototype.langs;\n/**\n * An EventEmitter to listen to translation change events\n * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n *     // do something\n * });\n * @type {?}\n */\nTranslateStore.prototype.onTranslationChange;\n/**\n * An EventEmitter to listen to lang change events\n * onLangChange.subscribe((params: LangChangeEvent) => {\n *     // do something\n * });\n * @type {?}\n */\nTranslateStore.prototype.onLangChange;\n/**\n * An EventEmitter to listen to default lang change events\n * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n *     // do something\n * });\n * @type {?}\n */\nTranslateStore.prototype.onDefaultLangChange;\n}\n\n"],"names":["Observable"],"mappings":"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"}