{"version":3,"file":"core.es5.js","sources":["~/@ngx-translate/core/core.ts","~/@ngx-translate/core/index.ts","~/@ngx-translate/core/translate.pipe.ts","~/@ngx-translate/core/translate.service.ts","~/@ngx-translate/core/translate.parser.ts","~/@ngx-translate/core/util.ts","~/@ngx-translate/core/missing-translation-handler.ts","~/@ngx-translate/core/translate.compiler.ts","~/@ngx-translate/core/translate.store.ts","~/@ngx-translate/core/translate.loader.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {TranslateModuleConfig,TranslateModule,TranslateLoader,TranslateFakeLoader,USE_STORE,USE_DEFAULT_LANG,TranslationChangeEvent,LangChangeEvent,DefaultLangChangeEvent,TranslateService,MissingTranslationHandlerParams,MissingTranslationHandler,FakeMissingTranslationHandler,TranslateParser,TranslateDefaultParser,TranslateCompiler,TranslateFakeCompiler,TranslatePipe} from './public_api';\n\nexport {TranslateStore as Éµa} from './translate.store';","import {NgModule, ModuleWithProviders, Provider} from '@angular/core';\nimport {TranslateLoader, TranslateFakeLoader} from './translate.loader';\nimport {TranslateService} from './translate.service';\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from './missing-translation-handler';\nimport {TranslateParser, TranslateDefaultParser} from './translate.parser';\nimport {TranslateCompiler, TranslateFakeCompiler} from './translate.compiler';\n// import {TranslateDirective} from \"./translate.directive\";\n\nimport {TranslatePipe} from './translate.pipe';\nimport {TranslateStore} from './translate.store';\nimport {USE_STORE} from './translate.service';\nimport {USE_DEFAULT_LANG} from './translate.service';\n\nexport {TranslateLoader,TranslateFakeLoader} from './translate.loader';\nexport {USE_STORE,USE_DEFAULT_LANG,TranslationChangeEvent,LangChangeEvent,DefaultLangChangeEvent,TranslateService} from './translate.service';\nexport {MissingTranslationHandlerParams,MissingTranslationHandler,FakeMissingTranslationHandler} from './missing-translation-handler';\nexport {TranslateParser,TranslateDefaultParser} from './translate.parser';\nexport {TranslateCompiler,TranslateFakeCompiler} from './translate.compiler';\n// export * from \"./translate.directive\";\nexport {TranslatePipe} from './translate.pipe';\n\nexport interface TranslateModuleConfig {\n    loader?: Provider;\n    compiler?: Provider;\n    parser?: Provider;\n    missingTranslationHandler?: Provider;\n    // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n    isolate?: boolean;\n    useDefaultLang?: boolean;\n}\nexport class TranslateModule {\n/**\n * Use this method in your root module to provide the TranslateService\n * @param {?=} config\n * @return {?}\n */\nstatic forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                TranslateStore,\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n/**\n * Use this method in your other (non root) modules to import the directive/pipe\n * @param {?=} config\n * @return {?}\n */\nstatic forChild(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        TranslatePipe,\n        // TranslateDirective\n    ],\n    exports: [\n        TranslatePipe,\n        // TranslateDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TranslateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {PipeTransform, Pipe, Injectable, EventEmitter, OnDestroy, ChangeDetectorRef} from '@angular/core';\nimport {TranslateService, LangChangeEvent, TranslationChangeEvent, DefaultLangChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n    value: string = '';\n    lastKey: string;\n    lastParams: any[];\n    onTranslationChange: EventEmitter<TranslationChangeEvent>;\n    onLangChange: EventEmitter<LangChangeEvent>;\n    onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n/**\n * @param {?} translate\n * @param {?} _ref\n */\nconstructor(private translate: TranslateService,\nprivate _ref: ChangeDetectorRef) {\n    }\n/**\n * @param {?} key\n * @param {?=} interpolateParams\n * @param {?=} translations\n * @return {?}\n */\nupdateValue(key: string, interpolateParams?: Object, translations?: any): void {\n        let /** @type {?} */ onTranslation = (res: string) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        };\n        if(translations) {\n            let /** @type {?} */ res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if(typeof res.subscribe === 'function') {\n                res.subscribe(onTranslation);\n            } else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n/**\n * @param {?} query\n * @param {...?} args\n * @return {?}\n */\ntransform(query: string, ...args: any[]): any {\n        if(!query || query.length === 0) {\n            return query;\n        }\n\n        // if we ask another time for the same key, return the last value\n        if(equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n\n        let /** @type {?} */ interpolateParams: Object;\n        if(isDefined(args[0]) && args.length) {\n            if(typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                let /** @type {?} */ validArgs: string = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                } catch( /** @type {?} */e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            } else if(typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n\n        // store the query, in case it changes\n        this.lastKey = query;\n\n        // store the params, in case they change\n        this.lastParams = args;\n\n        // set the value\n        this.updateValue(query, interpolateParams);\n\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n\n        // subscribe to onTranslationChange event, in case the translations change\n        if(!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n                if(this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onLangChange event, in case the language changes\n        if(!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if(!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n                if(this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            });\n        }\n\n        return this.value;\n    }\n/**\n * Clean any existing subscription to change events\n * @return {?}\n */\n_dispose(): void {\n        if(typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if(typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if(typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n        this._dispose();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Pipe, args: [{\n    name: 'translate',\n    pure: false // required to update the value when the promise is resolved\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslateService, },\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TranslatePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslatePipe.ctorParameters;\n/** @type {?} */\nTranslatePipe.prototype.value;\n/** @type {?} */\nTranslatePipe.prototype.lastKey;\n/** @type {?} */\nTranslatePipe.prototype.lastParams;\n/** @type {?} */\nTranslatePipe.prototype.onTranslationChange;\n/** @type {?} */\nTranslatePipe.prototype.onLangChange;\n/** @type {?} */\nTranslatePipe.prototype.onDefaultLangChange;\n/** @type {?} */\nTranslatePipe.prototype.translate;\n/** @type {?} */\nTranslatePipe.prototype._ref;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, EventEmitter, Inject, InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/concat';\nimport'rxjs/add/operator/share';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/merge';\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/operator/toArray';\nimport'rxjs/add/operator/take';\n\nimport {TranslateStore} from './translate.store';\nimport {TranslateLoader} from './translate.loader';\nimport {TranslateCompiler} from './translate.compiler';\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from './missing-translation-handler';\nimport {TranslateParser} from './translate.parser';\nimport {mergeDeep, isDefined} from './util';\n\nexport const /** @type {?} */ USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const /** @type {?} */ USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n    translations: any;\n    lang: string;\n}\n\nexport interface LangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n    lang: string;\n    translations: any;\n}\n\ndeclare interface Window {\n    navigator: any;\n}\ndeclare const window: Window;\nexport class TranslateService {\nprivate loadingTranslations: Observable<any>;\nprivate pending: boolean = false;\nprivate _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\nprivate _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\nprivate _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\nprivate _defaultLang: string;\nprivate _currentLang: string;\nprivate _langs: Array<string> = [];\nprivate _translations: any = {};\nprivate _translationRequests: any  = {};\n/**\n * An EventEmitter to listen to translation change events\n * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n *     // do something\n * });\n * @return {?}\n */\nget onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n/**\n * An EventEmitter to listen to lang change events\n * onLangChange.subscribe((params: LangChangeEvent) => {\n *     // do something\n * });\n * @return {?}\n */\nget onLangChange(): EventEmitter<LangChangeEvent> {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n/**\n * An EventEmitter to listen to default lang change events\n * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n *     // do something\n * });\n * @return {?}\n */\nget onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n/**\n * The default lang to fallback when translations are missing on the current lang\n * @return {?}\n */\nget defaultLang(): string {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n/**\n * @param {?} defaultLang\n * @return {?}\n */\nset defaultLang(defaultLang: string) {\n        if(this.isolate) {\n            this._defaultLang = defaultLang;\n        } else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n/**\n * The lang currently used\n * @return {?}\n */\nget currentLang(): string {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n/**\n * @param {?} currentLang\n * @return {?}\n */\nset currentLang(currentLang: string) {\n        if(this.isolate) {\n            this._currentLang = currentLang;\n        } else {\n            this.store.currentLang = currentLang;\n        }\n    }\n/**\n * an array of langs\n * @return {?}\n */\nget langs(): string[] {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n/**\n * @param {?} langs\n * @return {?}\n */\nset langs(langs: string[]) {\n        if(this.isolate) {\n            this._langs = langs;\n        } else {\n            this.store.langs = langs;\n        }\n    }\n/**\n * a list of translations per lang\n * @return {?}\n */\nget translations(): any {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n/**\n * @param {?} translations\n * @return {?}\n */\nset translations(translations: any) {\n        if(this.isolate) {\n            this._currentLang = translations;\n        } else {\n            this.store.translations = translations;\n        }\n    }\n/**\n *\n * @param {?} store an instance of the store (that is supposed to be unique)\n * @param {?} currentLoader An instance of the loader currently used\n * @param {?} compiler An instance of the compiler currently used\n * @param {?} parser An instance of the parser currently used\n * @param {?} missingTranslationHandler A handler for missing translations.\n * @param {?=} useDefaultLang whether we should use default language translation when current language translation is missing.\n * @param {?=} isolate whether this service should use the store or not\n */\nconstructor(public store: TranslateStore,\npublic currentLoader: TranslateLoader,\npublic compiler: TranslateCompiler,\npublic parser: TranslateParser,\npublic missingTranslationHandler: MissingTranslationHandler,\nprivate useDefaultLang: boolean = true,\nprivate isolate: boolean = false) {\n    }\n/**\n * Sets the default language to use as a fallback\n * @param {?} lang\n * @return {?}\n */\npublic setDefaultLang(lang: string): void {\n        if(lang === this.defaultLang) {\n            return;\n        }\n\n        let /** @type {?} */ pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if(!this.defaultLang) {\n                this.defaultLang = lang;\n            }\n\n            pending.take(1)\n                .subscribe((res: any) => {\n                    this.changeDefaultLang(lang);\n                });\n        } else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n/**\n * Gets the default language used\n * @return {?} string\n */\npublic getDefaultLang(): string {\n        return this.defaultLang;\n    }\n/**\n * Changes the lang currently used\n * @param {?} lang\n * @return {?}\n */\npublic use(lang: string): Observable<any> {\n        // don't change the language if the language given is already selected\n        if(lang === this.currentLang) {\n            return Observable.of(this.translations[lang]);\n        }\n        \n        let /** @type {?} */ pending: Observable<any> = this.retrieveTranslations(lang);\n\n        if(typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if(!this.currentLang) {\n                this.currentLang = lang;\n            }\n\n            pending.take(1)\n                .subscribe((res: any) => {\n                    this.changeLang(lang);\n                });\n\n            return pending;\n        } else { // we have this language, return an Observable\n            this.changeLang(lang);\n\n            return Observable.of(this.translations[lang]);\n        }\n    }\n/**\n * Retrieves the given translations\n * @param {?} lang\n * @return {?}\n */\nprivate retrieveTranslations(lang: string): Observable<any> {\n        let /** @type {?} */ pending: Observable<any>;\n\n        // if this language is unavailable, ask for it\n        if(typeof this.translations[lang] === \"undefined\") {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n\n        return pending;\n    }\n/**\n * Gets an object of translations for a given language with the current loader\n * and passes it through the compiler\n * @param {?} lang\n * @return {?}\n */\npublic getTranslation(lang: string): Observable<any> {\n        this.pending = true;\n        this.loadingTranslations = this.currentLoader.getTranslation(lang).share();\n\n        this.loadingTranslations.take(1)\n            .subscribe((res: Object) => {\n                this.translations[lang] = this.compiler.compileTranslations(res, lang);\n                this.updateLangs();\n                this.pending = false;\n            }, (err: any) => {\n                this.pending = false;\n            });\n\n        return this.loadingTranslations;\n    }\n/**\n * Manually sets an object of translations for a given language\n * after passing it through the compiler\n * @param {?} lang\n * @param {?} translations\n * @param {?=} shouldMerge\n * @return {?}\n */\npublic setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if(shouldMerge && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        } else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n/**\n * Returns an array of currently available langs\n * @return {?}\n */\npublic getLangs(): Array<string> {\n        return this.langs;\n    }\n/**\n * @param {?} langs \n * Add available langs\n * @return {?}\n */\npublic addLangs(langs: Array<string>): void {\n        langs.forEach((lang: string) => {\n            if(this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        });\n    }\n/**\n * Update the list of available langs\n * @return {?}\n */\nprivate updateLangs(): void {\n        this.addLangs(Object.keys(this.translations));\n    }\n/**\n * Returns the parsed result of the translations\n * @param {?} translations\n * @param {?} key\n * @param {?=} interpolateParams\n * @return {?}\n */\npublic getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n        let /** @type {?} */ res: string | Observable<string>;\n\n        if(key instanceof Array) {\n            let /** @type {?} */ result: any = {}, /** @type {?} */\n                observables: boolean = false;\n            for(let /** @type {?} */ k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if(typeof result[k].subscribe === \"function\") {\n                    observables = true;\n                }\n            }\n            if(observables) {\n                let /** @type {?} */ mergedObs: any;\n                for(let /** @type {?} */ k of key) {\n                    let /** @type {?} */ obs = typeof result[k].subscribe === \"function\" ? result[k] : Observable.of(result[k]);\n                    if(typeof mergedObs === \"undefined\") {\n                        mergedObs = obs;\n                    } else {\n                        mergedObs = mergedObs.merge(obs);\n                    }\n                }\n                return mergedObs.toArray().map((arr: Array<string>) => {\n                    let /** @type {?} */ obj: any = {};\n                    arr.forEach((value: string, index: number) => {\n                        obj[key[index]] = value;\n                    });\n                    return obj;\n                });\n            }\n            return result;\n        }\n\n        if(translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n\n        if(typeof res === \"undefined\") {\n            let /** @type {?} */ params: MissingTranslationHandlerParams = {key, translateService: this};\n            if(typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n\n        return typeof res !== \"undefined\" ? res : key;\n    }\n/**\n * Gets the translated value of a key (or an array of keys)\n * @param {?} key\n * @param {?=} interpolateParams\n * @return {?}\n */\npublic get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if(this.pending) {\n            return Observable.create((observer: Observer<string>) => {\n                let /** @type {?} */ onComplete = (res: string) => {\n                    observer.next(res);\n                    observer.complete();\n                };\n                let /** @type {?} */ onError = (err: any) => {\n                    observer.error(err);\n                };\n                this.loadingTranslations.subscribe((res: any) => {\n                    res = this.getParsedResult(res, key, interpolateParams);\n                    if(typeof res.subscribe === \"function\") {\n                        res.subscribe(onComplete, onError);\n                    } else {\n                        onComplete(res);\n                    }\n                }, onError);\n            });\n        } else {\n            let /** @type {?} */ res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            if(typeof res.subscribe === \"function\") {\n                return res;\n            } else {\n                return Observable.of(res);\n            }\n        }\n    }\n/**\n * Returns a stream of translated values of a key (or an array of keys) which updates\n * whenever the language changes.\n * @param {?} key\n * @param {?=} interpolateParams\n * @return {?}\n */\npublic stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        return this\n            .get(key, interpolateParams)\n            .concat(this.onLangChange.switchMap((event: LangChangeEvent) => {\n                const /** @type {?} */ res = this.getParsedResult(event.translations, key, interpolateParams);\n                if(typeof res.subscribe === \"function\") {\n                    return res;\n                } else {\n                    return Observable.of(res);\n                }\n            }));\n    }\n/**\n * Returns a translation instantly from the internal state of loaded translation.\n * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n * @param {?} key\n * @param {?=} interpolateParams\n * @return {?}\n */\npublic instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n        if(!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n\n        let /** @type {?} */ res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if(typeof res.subscribe !== \"undefined\") {\n            if(key instanceof Array) {\n                let /** @type {?} */ obj: any = {};\n                key.forEach((value: string, index: number) => {\n                    obj[key[index]] = key[index];\n                });\n                return obj;\n            }\n            return key;\n        } else {\n            return res;\n        }\n    }\n/**\n * Sets the translated value of a key, after compiling it\n * @param {?} key\n * @param {?} value\n * @param {?=} lang\n * @return {?}\n */\npublic set(key: string, value: string, lang: string = this.currentLang): void {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n/**\n * Changes the current lang\n * @param {?} lang\n * @return {?}\n */\nprivate changeLang(lang: string): void {\n        this.currentLang = lang;\n        this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n        // if there is no default lang, use the one that we just set\n        if(!this.defaultLang) {\n            this.changeDefaultLang(lang);\n        }\n    }\n/**\n * Changes the default lang\n * @param {?} lang\n * @return {?}\n */\nprivate changeDefaultLang(lang: string): void {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n    }\n/**\n * Allows to reload the lang file from the file\n * @param {?} lang\n * @return {?}\n */\npublic reloadLang(lang: string): Observable<any> {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n/**\n * Deletes inner translation\n * @param {?} lang\n * @return {?}\n */\npublic resetLang(lang: string): void {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n/**\n * Returns the language code name from the browser, e.g. \"de\"\n * \n * @return {?} string\n */\npublic getBrowserLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let /** @type {?} */ browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        if(browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n\n        if(browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n\n        return browserLang;\n    }\n/**\n * Returns the culture language code name from the browser, e.g. \"de-DE\"\n * \n * @return {?} string\n */\npublic getBrowserCultureLang(): string {\n        if(typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n\n        let /** @type {?} */ browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n        return browserCultureLang;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TranslateStore, },\n{type: TranslateLoader, },\n{type: TranslateCompiler, },\n{type: TranslateParser, },\n{type: MissingTranslationHandler, },\n{type: undefined, decorators: [{ type: Inject, args: [USE_DEFAULT_LANG, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [USE_STORE, ] }, ]},\n];\n}\n\nfunction TranslateService_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslateService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslateService.ctorParameters;\n/** @type {?} */\nTranslateService.prototype.loadingTranslations;\n/** @type {?} */\nTranslateService.prototype.pending;\n/** @type {?} */\nTranslateService.prototype._onTranslationChange;\n/** @type {?} */\nTranslateService.prototype._onLangChange;\n/** @type {?} */\nTranslateService.prototype._onDefaultLangChange;\n/** @type {?} */\nTranslateService.prototype._defaultLang;\n/** @type {?} */\nTranslateService.prototype._currentLang;\n/** @type {?} */\nTranslateService.prototype._langs;\n/** @type {?} */\nTranslateService.prototype._translations;\n/** @type {?} */\nTranslateService.prototype._translationRequests;\n/** @type {?} */\nTranslateService.prototype.store;\n/** @type {?} */\nTranslateService.prototype.currentLoader;\n/** @type {?} */\nTranslateService.prototype.compiler;\n/** @type {?} */\nTranslateService.prototype.parser;\n/** @type {?} */\nTranslateService.prototype.missingTranslationHandler;\n/** @type {?} */\nTranslateService.prototype.useDefaultLang;\n/** @type {?} */\nTranslateService.prototype.isolate;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {isDefined} from './util';\n/**\n * @abstract\n */\nexport abstract class TranslateParser {\n/**\n * Interpolates a string to replace parameters\n * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n * @abstract\n * @param {?} expr\n * @param {?=} params\n * @return {?}\n */\ninterpolate(expr: string | Function, params?: any) {}\n/**\n * Gets a value from an object by composed key\n * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n * @abstract\n * @param {?} target\n * @param {?} key\n * @return {?}\n */\ngetValue(target: any, key: string) {}\n}\nexport class TranslateDefaultParser extends TranslateParser {\n    templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n/**\n * @param {?} expr\n * @param {?=} params\n * @return {?}\n */\npublic interpolate(expr: string | Function, params?: any): string {\n        let /** @type {?} */ result: string;\n\n        if(typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        } else if(typeof expr === 'function') {\n            result =  this.interpolateFunction(expr, params);\n        } else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = /** @type {?} */(( expr as string));\n        }\n\n        return result;\n    }\n/**\n * @param {?} target\n * @param {?} key\n * @return {?}\n */\ngetValue(target: any, key: string): any {\n        let /** @type {?} */ keys = key.split('.');\n        key = '';\n        do {\n            key += keys.shift();\n            if(isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            } else if(!keys.length) {\n                target = undefined;\n            } else {\n                key += '.';\n            }\n        } while(keys.length);\n\n        return target;\n    }\n/**\n * @param {?} fn\n * @param {?=} params\n * @return {?}\n */\nprivate interpolateFunction(fn: Function, params?: any) {\n        return fn(params);\n    }\n/**\n * @param {?} expr\n * @param {?=} params\n * @return {?}\n */\nprivate interpolateString(expr: string, params?: any) {\n        if (!params) {\n            return expr;\n        }\n\n        return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n            let /** @type {?} */ r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TranslateDefaultParser_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslateDefaultParser.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslateDefaultParser.ctorParameters;\n/** @type {?} */\nTranslateDefaultParser.prototype.templateMatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@name equals\n * \n * \\@description \n * Determines if two objects or two values are equivalent.\n * \n * Two objects or values are considered equivalent if at least one of the following is true:\n * \n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n * \n * @param {?} o1\n * @param {?} o2\n * @return {?}\n */\nexport function equals(o1: any, o2: any): boolean {\n    if (o1 === o2) return true;\n    if (o1 === null || o2 === null) return false;\n    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n    let /** @type {?} */ t1 = typeof o1, /** @type {?} */ t2 = typeof o2, /** @type {?} */ length: number, /** @type {?} */ key: any, /** @type {?} */ keySet: any;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2)) return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key])) return false;\n                }\n                return true;\n            }\n        } else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isDefined(value: any): boolean {\n    return typeof value !== 'undefined' && value !== null;\n}\n/**\n * @param {?} item\n * @return {?}\n */\nexport function isObject(item: any): boolean {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n/**\n * @param {?} target\n * @param {?} source\n * @return {?}\n */\nexport function mergeDeep(target: any, source: any): any {\n    target = JSON.parse(JSON.stringify(target));\n    source = JSON.parse(JSON.stringify(source));\n    let /** @type {?} */ output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((key: any) => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                } else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            } else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n}\n","import {TranslateService} from './translate.service';\nimport {Injectable} from '@angular/core';\n\nexport interface MissingTranslationHandlerParams {\n    /**\n     * the key that's missing in translation files\n     *\n     * @type {string}\n     */\n    key: string;\n\n    /**\n     * an instance of the service that was unable to translate the key.\n     *\n     * @type {TranslateService}\n     */\n    translateService: TranslateService;\n\n    /**\n     * interpolation params that were passed along for translating the given key.\n     *\n     * @type {Object}\n     */\n    interpolateParams?: Object;\n}\n/**\n * @abstract\n */\nexport abstract class MissingTranslationHandler {\n/**\n * A function that handles missing translations.\n * \n * @abstract \n * If it returns a value, then this value is used.\n * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n * If it doesn't return then the key will be used as a value\n * @abstract\n * @param {?} params\n * @return {?}\n */\nhandle(params: MissingTranslationHandlerParams) {}\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n/**\n * @param {?} params\n * @return {?}\n */\nhandle(params: MissingTranslationHandlerParams): string {\n        return params.key;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FakeMissingTranslationHandler_tsickle_Closure_declarations() {\n/** @type {?} */\nFakeMissingTranslationHandler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFakeMissingTranslationHandler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\n/**\n * @abstract\n */\nexport abstract class TranslateCompiler {\n/**\n * @abstract\n * @param {?} value\n * @param {?} lang\n * @return {?}\n */\ncompile(value: string, lang: string) {}\n/**\n * @abstract\n * @param {?} translations\n * @param {?} lang\n * @return {?}\n */\ncompileTranslations(translations: any, lang: string) {}\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nexport class TranslateFakeCompiler extends TranslateCompiler {\n/**\n * @param {?} value\n * @param {?} lang\n * @return {?}\n */\ncompile(value: string, lang: string): string | Function {\n        return value;\n    }\n/**\n * @param {?} translations\n * @param {?} lang\n * @return {?}\n */\ncompileTranslations(translations: any, lang: string): any {\n        return translations;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TranslateFakeCompiler_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslateFakeCompiler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslateFakeCompiler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {EventEmitter} from '@angular/core';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from './translate.service';\nexport class TranslateStore {\n/**\n * The default lang to fallback when translations are missing on the current lang\n */\npublic defaultLang: string;\n/**\n * The lang currently used\n */\npublic currentLang: string = this.defaultLang;\n/**\n * a list of translations per lang\n */\npublic translations: any = {};\n/**\n * an array of langs\n */\npublic langs: Array<string> = [];\n/**\n * An EventEmitter to listen to translation change events\n * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n *     // do something\n * });\n */\npublic onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n/**\n * An EventEmitter to listen to lang change events\n * onLangChange.subscribe((params: LangChangeEvent) => {\n *     // do something\n * });\n */\npublic onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n/**\n * An EventEmitter to listen to default lang change events\n * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n *     // do something\n * });\n */\npublic onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n\nfunction TranslateStore_tsickle_Closure_declarations() {\n/**\n * The default lang to fallback when translations are missing on the current lang\n * @type {?}\n */\nTranslateStore.prototype.defaultLang;\n/**\n * The lang currently used\n * @type {?}\n */\nTranslateStore.prototype.currentLang;\n/**\n * a list of translations per lang\n * @type {?}\n */\nTranslateStore.prototype.translations;\n/**\n * an array of langs\n * @type {?}\n */\nTranslateStore.prototype.langs;\n/**\n * An EventEmitter to listen to translation change events\n * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n *     // do something\n * });\n * @type {?}\n */\nTranslateStore.prototype.onTranslationChange;\n/**\n * An EventEmitter to listen to lang change events\n * onLangChange.subscribe((params: LangChangeEvent) => {\n *     // do something\n * });\n * @type {?}\n */\nTranslateStore.prototype.onLangChange;\n/**\n * An EventEmitter to listen to default lang change events\n * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n *     // do something\n * });\n * @type {?}\n */\nTranslateStore.prototype.onDefaultLangChange;\n}\n\n","import {Observable} from 'rxjs/Observable';\nimport {Injectable} from '@angular/core';\n/**\n * @abstract\n */\nexport abstract class TranslateLoader {\n/**\n * @abstract\n * @param {?} lang\n * @return {?}\n */\ngetTranslation(lang: string) {}\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nexport class TranslateFakeLoader extends TranslateLoader {\n/**\n * @param {?} lang\n * @return {?}\n */\ngetTranslation(lang: string): Observable<any> {\n        return Observable.of({});\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TranslateFakeLoader_tsickle_Closure_declarations() {\n/** @type {?} */\nTranslateFakeLoader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTranslateFakeLoader.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["Observable"],"mappings":"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"}